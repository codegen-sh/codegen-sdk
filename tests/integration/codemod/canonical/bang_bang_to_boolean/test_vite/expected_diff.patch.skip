diff --git a/packages/plugin-legacy/src/index.ts b/packages/plugin-legacy/src/index.ts
index c4a648753128ac5da7d9a74e6b1cef32a7e9ebea..e2cb2a354bd461f96107ac0add2e480ee119f2f8 100644
--- a/packages/plugin-legacy/src/index.ts
+++ b/packages/plugin-legacy/src/index.ts
@@ -65,7 +65,7 @@ function toOutputFilePathInHtml(
       hostId,
       hostType,
       type,
-      ssr: !!config.build.ssr,
+      ssr: Boolean(config.build.ssr),
     })
     if (typeof result === 'object') {
       if (result.runtime) {
@@ -538,12 +538,12 @@ function viteLegacyPlugin(options: Options = {}): Plugin[] {
         options.polyfills !== false && !Array.isArray(options.polyfills)
 
       // transform the legacy chunk with @babel/preset-env
-      const sourceMaps = !!config.build.sourcemap
+      const sourceMaps = Boolean(config.build.sourcemap)
       const babel = await loadBabel()
       const result = babel.transform(raw, {
         babelrc: false,
         configFile: false,
-        compact: !!config.build.minify,
+        compact: Boolean(config.build.minify),
         sourceMaps,
         inputSourceMap: undefined, // sourceMaps ? chunk.map : undefined, `.map` TODO: moved to OutputChunk?
         presets: [
@@ -877,7 +877,7 @@ function isLegacyBundle(
       (output) => output.type === 'chunk' && output.isEntry,
     )
 
-    return !!entryChunk && entryChunk.fileName.includes('-legacy')
+    return Boolean(entryChunk) && entryChunk.fileName.includes('-legacy')
   }
 
   return false
diff --git a/packages/vite/src/node/build.ts b/packages/vite/src/node/build.ts
index d86393d36656fcf9fd328b718cbf684c04d00ae8..b4333ab42b72be6bcda50c67b748299ef5d33414 100644
--- a/packages/vite/src/node/build.ts
+++ b/packages/vite/src/node/build.ts
@@ -418,7 +418,7 @@ export function resolveBuildOptions(
   }
 
   if (resolved.cssMinify == null) {
-    resolved.cssMinify = !!resolved.minify
+    resolved.cssMinify = Boolean(resolved.minify)
   }
 
   return resolved
@@ -475,7 +475,7 @@ export async function build(
   )
   const options = config.build
   const { logger } = config
-  const ssr = !!options.ssr
+  const ssr = Boolean(options.ssr)
   const libOptions = options.lib
 
   logger.info(
@@ -1210,7 +1210,7 @@ export function toOutputFilePathInJS(
       hostId,
       hostType,
       type,
-      ssr: !!config.build.ssr,
+      ssr: Boolean(config.build.ssr),
     })
     if (typeof result === 'object') {
       if (result.runtime) {
@@ -1257,7 +1257,7 @@ export function toOutputFilePathWithoutRuntime(
       hostId,
       hostType,
       type,
-      ssr: !!config.build.ssr,
+      ssr: Boolean(config.build.ssr),
     })
     if (typeof result === 'object') {
       if (result.runtime) {
diff --git a/packages/vite/src/node/config.ts b/packages/vite/src/node/config.ts
index e38e5b5959809ba9a1f08ba10ee14a8722fdd308..3ed2c71a92f6efddded098fffda0b6390d0349cd 100644
--- a/packages/vite/src/node/config.ts
+++ b/packages/vite/src/node/config.ts
@@ -457,7 +457,7 @@ export async function resolveConfig(
   let config = inlineConfig
   let configFileDependencies: string[] = []
   let mode = inlineConfig.mode || defaultMode
-  const isNodeEnvSet = !!process.env.NODE_ENV
+  const isNodeEnvSet = Boolean(process.env.NODE_ENV)
   const packageCache: PackageCache = new Map()
 
   // some dependencies e.g. @vue/compiler-* relies on NODE_ENV for getting
@@ -469,7 +469,7 @@ export async function resolveConfig(
   const configEnv: ConfigEnv = {
     mode,
     command,
-    isSsrBuild: command === 'build' && !!config.build?.ssr,
+    isSsrBuild: command === 'build' && Boolean(config.build?.ssr),
     isPreview,
   }
 
@@ -1152,11 +1152,11 @@ async function bundleConfigFile(
                 if (!isImport) {
                   let canResolveWithImport = false
                   try {
-                    canResolveWithImport = !!resolveByViteResolver(
+                    canResolveWithImport = Boolean(resolveByViteResolver(
                       id,
                       importer,
                       false,
-                    )
+                    ))
                   } catch {}
                   if (canResolveWithImport) {
                     throw new Error(
diff --git a/packages/vite/src/node/fsUtils.ts b/packages/vite/src/node/fsUtils.ts
index a295d4fc41adb66a139f6ec3c28f68ee57886d25..c7eba3b027f0a346429d6c924904c273a80ebc83 100644
--- a/packages/vite/src/node/fsUtils.ts
+++ b/packages/vite/src/node/fsUtils.ts
@@ -252,7 +252,7 @@ export function createCachedFsUtils(config: ResolvedConfig): FsUtils {
         // fallback to built-in fs for out-of-root and symlinked files
         return fs.existsSync(file)
       }
-      return !!direntCache
+      return Boolean(direntCache)
     },
     tryResolveRealFile(
       file: string,
diff --git a/packages/vite/src/node/optimizer/optimizer.ts b/packages/vite/src/node/optimizer/optimizer.ts
index 3f76e480a45e75338010944b163da39847e4d633..33db424d2181f6f313721f049ac863f2919368f7 100644
--- a/packages/vite/src/node/optimizer/optimizer.ts
+++ b/packages/vite/src/node/optimizer/optimizer.ts
@@ -159,7 +159,7 @@ async function createDepsOptimizer(
   let enqueuedRerun: (() => void) | undefined
   let currentlyProcessing = false
 
-  let firstRunCalled = !!cachedMetadata
+  let firstRunCalled = Boolean(cachedMetadata)
   let warnAboutMissedDependencies = false
 
   // If this is a cold run, we wait for static imports discovered
diff --git a/packages/vite/src/node/plugins/clientInjections.ts b/packages/vite/src/node/plugins/clientInjections.ts
index c66f3877eca822c14989eac10c480f2639d1080a..6f305f2b71a3eded0527163027b76eb7612479f4 100644
--- a/packages/vite/src/node/plugins/clientInjections.ts
+++ b/packages/vite/src/node/plugins/clientInjections.ts
@@ -32,7 +32,7 @@ export function clientInjectionsPlugin(config: ResolvedConfig): Plugin {
       const protocol = hmrConfig?.protocol || null
       const timeout = hmrConfig?.timeout || 30000
       const overlay = hmrConfig?.overlay !== false
-      const isHmrServerSpecified = !!hmrConfig?.server
+      const isHmrServerSpecified = Boolean(hmrConfig?.server)
       const hmrConfigName = path.basename(config.configFile || 'vite.config.js')
 
       // hmr.clientPort -> hmr.port
diff --git a/packages/vite/src/node/plugins/css.ts b/packages/vite/src/node/plugins/css.ts
index 26ba17c192f84ea79fed0d46c371925c6fa117d1..de40ca7d2486c1405008fba8ab137d3250953c12 100644
--- a/packages/vite/src/node/plugins/css.ts
+++ b/packages/vite/src/node/plugins/css.ts
@@ -2184,11 +2184,11 @@ const makeScssWorker = (
       shouldUseFake(_sassPath, _data, options) {
         // functions and importer is a function and is not serializable
         // in that case, fallback to running in main thread
-        return !!(
+        return Boolean((
           (options.functions && Object.keys(options.functions).length > 0) ||
           (options.importer &&
             (!Array.isArray(options.importer) || options.importer.length > 0))
-        )
+        ))
       },
       max: maxWorkers,
     },
@@ -2286,11 +2286,11 @@ const makeModernScssWorker = (
       shouldUseFake(_sassPath, _data, options) {
         // functions and importer is a function and is not serializable
         // in that case, fallback to running in main thread
-        return !!(
+        return Boolean((
           (options.functions && Object.keys(options.functions).length > 0) ||
           (options.importers &&
             (!Array.isArray(options.importers) || options.importers.length > 0))
-        )
+        ))
       },
       max: maxWorkers,
     },
@@ -2749,10 +2749,10 @@ const makeStylWorker = (maxWorkers: number | undefined) => {
       shouldUseFake(_stylusPath, _content, _root, options) {
         // define can include functions and those are not serializable
         // in that case, fallback to running in main thread
-        return !!(
+        return Boolean((
           options.define &&
           Object.values(options.define).some((d) => typeof d === 'function')
-        )
+        ))
       },
       max: maxWorkers,
     },
@@ -2949,7 +2949,7 @@ async function compileLightningCSS(
         filename,
         code: Buffer.from(src),
         targets: config.css?.lightningcss?.targets,
-        minify: config.isProduction && !!config.build.cssMinify,
+        minify: config.isProduction && Boolean(config.build.cssMinify),
         analyzeDependencies: true,
       })
     : await (
@@ -2986,10 +2986,10 @@ async function compileLightningCSS(
             return id
           },
         },
-        minify: config.isProduction && !!config.build.cssMinify,
+        minify: config.isProduction && Boolean(config.build.cssMinify),
         sourceMap:
           config.command === 'build'
-            ? !!config.build.sourcemap
+            ? Boolean(config.build.sourcemap)
             : config.css?.devSourcemap,
         analyzeDependencies: true,
         cssModules: cssModuleRE.test(id)
diff --git a/packages/vite/src/node/plugins/define.ts b/packages/vite/src/node/plugins/define.ts
index 585bc0154fa263e270f20eab587042fb66fd8f3d..5d53513ed4806d7ff61563541ab078d8d1625274 100644
--- a/packages/vite/src/node/plugins/define.ts
+++ b/packages/vite/src/node/plugins/define.ts
@@ -166,7 +166,7 @@ export async function replaceDefine(
     platform: 'neutral',
     define,
     sourcefile: id,
-    sourcemap: config.command === 'build' ? !!config.build.sourcemap : true,
+    sourcemap: config.command === 'build' ? Boolean(config.build.sourcemap) : true,
   })
 
   // remove esbuild's <define:...> source entries
diff --git a/packages/vite/src/node/plugins/html.ts b/packages/vite/src/node/plugins/html.ts
index b7109debc3863a9ddab4d278912a83f0ac1ac115..5e11b9e009a88b65ba387701d9a73d8cbffa4a68 100644
--- a/packages/vite/src/node/plugins/html.ts
+++ b/packages/vite/src/node/plugins/html.ts
@@ -435,7 +435,7 @@ export function buildHtmlPlugin(config: ResolvedConfig): Plugin {
               getScriptInfo(node)
 
             const url = src && src.value
-            const isPublicFile = !!(url && checkPublicFile(url, config))
+            const isPublicFile = Boolean((url && checkPublicFile(url, config)))
             if (isPublicFile) {
               // referencing public dir url, prefix with base
               overwriteAttrValue(
diff --git a/packages/vite/src/node/plugins/importAnalysisBuild.ts b/packages/vite/src/node/plugins/importAnalysisBuild.ts
index 7dcad179654fe4afcc406b46fed262a58af5b81f..ae11759929ec1c8856ae12d91fe15db6d16666c3 100644
--- a/packages/vite/src/node/plugins/importAnalysisBuild.ts
+++ b/packages/vite/src/node/plugins/importAnalysisBuild.ts
@@ -101,7 +101,7 @@ function preload(
         seen[dep] = true
         const isCss = dep.endsWith('.css')
         const cssSelector = isCss ? '[rel="stylesheet"]' : ''
-        const isBaseRelative = !!importerUrl
+        const isBaseRelative = Boolean(importerUrl)
 
         // check if the file is already preloaded by SSR markup
         if (isBaseRelative) {
@@ -162,16 +162,16 @@ function preload(
  * Build only. During serve this is performed as part of ./importAnalysis.
  */
 export function buildImportAnalysisPlugin(config: ResolvedConfig): Plugin {
-  const ssr = !!config.build.ssr
+  const ssr = Boolean(config.build.ssr)
   const isWorker = config.isWorker
-  const insertPreload = !(ssr || !!config.build.lib || isWorker)
+  const insertPreload = !(ssr || Boolean(config.build.lib) || isWorker)
 
   const resolveModulePreloadDependencies =
     config.build.modulePreload && config.build.modulePreload.resolveDependencies
   const renderBuiltUrl = config.experimental.renderBuiltUrl
-  const customModulePreloadPaths = !!(
+  const customModulePreloadPaths = Boolean((
     resolveModulePreloadDependencies || renderBuiltUrl
-  )
+  ))
   const isRelativeBase = config.base === './' || config.base === ''
   const optimizeModulePreloadRelativePaths =
     isRelativeBase && !customModulePreloadPaths
diff --git a/packages/vite/src/node/plugins/importMetaGlob.ts b/packages/vite/src/node/plugins/importMetaGlob.ts
index d596d39d1a62e9875558a058db9736e1ef4fa95d..ce56279df2bcf62382ae583d2066e195656b9ff0 100644
--- a/packages/vite/src/node/plugins/importMetaGlob.ts
+++ b/packages/vite/src/node/plugins/importMetaGlob.ts
@@ -396,7 +396,7 @@ export async function transformGlobImport(
             await fg(globsResolved, {
               cwd,
               absolute: true,
-              dot: !!options.exhaustive,
+              dot: Boolean(options.exhaustive),
               ignore: options.exhaustive
                 ? []
                 : [join(cwd, '**/node_modules/**')],
diff --git a/packages/vite/src/node/plugins/terser.ts b/packages/vite/src/node/plugins/terser.ts
index 90c29b26c7501ec2c2bad08fd985d85cf8ca580a..d045ca27c386e3e24a06791d420b66770421df72 100644
--- a/packages/vite/src/node/plugins/terser.ts
+++ b/packages/vite/src/node/plugins/terser.ts
@@ -84,7 +84,7 @@ export function terserPlugin(config: ResolvedConfig): Plugin {
       const res = await worker.run(terserPath, code, {
         safari10: true,
         ...terserOptions,
-        sourceMap: !!outputOptions.sourcemap,
+        sourceMap: Boolean(outputOptions.sourcemap),
         module: outputOptions.format.startsWith('es'),
         toplevel: outputOptions.format === 'cjs',
       })
diff --git a/packages/vite/src/node/server/index.ts b/packages/vite/src/node/server/index.ts
index b5e1d9c57e5f196cc2cca347cec1a14496420263..5623153d4a3946be42096cfd2727cbf49f139d1d 100644
--- a/packages/vite/src/node/server/index.ts
+++ b/packages/vite/src/node/server/index.ts
@@ -684,7 +684,7 @@ export async function _createServer(
     },
     async restart(forceOptimize?: boolean) {
       if (!server._restartPromise) {
-        server._forceOptimizeOnRestart = !!forceOptimize
+        server._forceOptimizeOnRestart = Boolean(forceOptimize)
         server._restartPromise = restartServer(server).finally(() => {
           server._restartPromise = null
           server._forceOptimizeOnRestart = false
@@ -865,7 +865,7 @@ export async function _createServer(
 
   // base
   if (config.base !== '/') {
-    middlewares.use(baseMiddleware(config.rawBase, !!middlewareMode))
+    middlewares.use(baseMiddleware(config.rawBase, Boolean(middlewareMode)))
   }
 
   // open in editor support
@@ -920,7 +920,7 @@ export async function _createServer(
   }
 
   // error handler
-  middlewares.use(errorMiddleware(server, !!middlewareMode))
+  middlewares.use(errorMiddleware(server, Boolean(middlewareMode)))
 
   // httpServer.listen can be called multiple times
   // when port when using next port number
diff --git a/packages/vite/src/node/server/moduleGraph.ts b/packages/vite/src/node/server/moduleGraph.ts
index 442ece308dbaff945085f9e797892530aca64c95..9bed1e7feb64ce71974eda8e8adb1109e209e656 100644
--- a/packages/vite/src/node/server/moduleGraph.ts
+++ b/packages/vite/src/node/server/moduleGraph.ts
@@ -501,7 +501,7 @@ export class ModuleGraph {
     ssr?: boolean,
     alreadyResolved?: PartialResolvedId,
   ): Promise<ResolvedUrl> {
-    const resolved = alreadyResolved ?? (await this.resolveId(url, !!ssr))
+    const resolved = alreadyResolved ?? (await this.resolveId(url, Boolean(ssr)))
     const resolvedId = resolved?.id || url
     if (
       url !== resolvedId &&
diff --git a/packages/vite/src/node/server/pluginContainer.ts b/packages/vite/src/node/server/pluginContainer.ts
index 3251790d1698644c05ea4da3e2091b15b814aae2..4aec442b9d452d98f46a74f901cfebafb6b0e16c 100644
--- a/packages/vite/src/node/server/pluginContainer.ts
+++ b/packages/vite/src/node/server/pluginContainer.ts
@@ -311,8 +311,8 @@ class PluginContainer {
   ): Promise<PartialResolvedId | null> {
     const skip = options?.skip
     const ssr = options?.ssr
-    const scan = !!options?.scan
-    const ctx = new ResolveIdContext(this, !!ssr, skip, scan)
+    const scan = Boolean(options?.scan)
+    const ctx = new ResolveIdContext(this, Boolean(ssr), skip, scan)
 
     const resolveStart = debugResolve ? performance.now() : 0
     let id: string | null = null
@@ -331,7 +331,7 @@ class PluginContainer {
         handler.call(ctx as any, rawId, importer, {
           attributes: options?.attributes ?? {},
           custom: options?.custom,
-          isEntry: !!options?.isEntry,
+          isEntry: Boolean(options?.isEntry),
           ssr,
           scan,
         }),
@@ -383,7 +383,7 @@ class PluginContainer {
     },
   ): Promise<LoadResult | null> {
     const ssr = options?.ssr
-    const ctx = new LoadPluginContext(this, !!ssr)
+    const ctx = new LoadPluginContext(this, Boolean(ssr))
 
     for (const plugin of this.getSortedPlugins('load')) {
       if (this._closed && !ssr) throwClosedServerError()
@@ -421,7 +421,7 @@ class PluginContainer {
       id,
       code,
       inMap as SourceMap,
-      !!ssr,
+      Boolean(ssr),
     )
     ctx._addedImports = this._getAddedImports(id)
 
@@ -539,7 +539,7 @@ class PluginContext implements Omit<RollupPluginContext, 'cache'> {
     let out = await this._container.resolveId(id, importer, {
       attributes: options?.attributes,
       custom: options?.custom,
-      isEntry: !!options?.isEntry,
+      isEntry: Boolean(options?.isEntry),
       skip,
       ssr: this.ssr,
       scan: this._scan,
diff --git a/packages/vite/src/node/server/searchRoot.ts b/packages/vite/src/node/server/searchRoot.ts
index edb7a76946266e1cc2acbbea8df196aa4e50ebf3..eefe04680579da2450c6543faabcd2235c966d12 100644
--- a/packages/vite/src/node/server/searchRoot.ts
+++ b/packages/vite/src/node/server/searchRoot.ts
@@ -29,7 +29,7 @@ function hasWorkspacePackageJSON(root: string): boolean {
   }
   try {
     const content = JSON.parse(fs.readFileSync(path, 'utf-8')) || {}
-    return !!content.workspaces
+    return Boolean(content.workspaces)
   } catch {
     return false
   }
diff --git a/packages/vite/src/node/server/transformRequest.ts b/packages/vite/src/node/server/transformRequest.ts
index dc98c1795daf26a8344158bee040b58d6955e55d..fdd06e9ed24159273802afead00a04cf053027a0 100644
--- a/packages/vite/src/node/server/transformRequest.ts
+++ b/packages/vite/src/node/server/transformRequest.ts
@@ -132,7 +132,7 @@ async function doTransform(
   url = removeTimestampQuery(url)
 
   const { config, pluginContainer } = server
-  const ssr = !!options.ssr
+  const ssr = Boolean(options.ssr)
 
   if (ssr && isDepsOptimizerEnabled(config, true)) {
     await initDevSsrDepsOptimizer(config, server)
@@ -237,7 +237,7 @@ async function loadAndTransform(
   const { logger } = config
   const prettyUrl =
     debugLoad || debugTransform ? prettifyUrl(url, config.root) : ''
-  const ssr = !!options.ssr
+  const ssr = Boolean(options.ssr)
 
   const file = cleanUrl(id)
 
diff --git a/packages/vite/src/node/ssr/ssrExternal.ts b/packages/vite/src/node/ssr/ssrExternal.ts
index 5681e000502a5f2d1a44183711c8c1c128b6d677..53eff3822d9a998ff0eda5cddffd8c1b3085099f 100644
--- a/packages/vite/src/node/ssr/ssrExternal.ts
+++ b/packages/vite/src/node/ssr/ssrExternal.ts
@@ -59,7 +59,7 @@ export function createIsConfiguredAsSsrExternal(
       return false
     }
     try {
-      return !!tryNodeResolve(
+      return Boolean(tryNodeResolve(
         id,
         // Skip passing importer in build to avoid externalizing non-hoisted dependencies
         // unresolvable from root (which would be unresolvable from output bundles also)
@@ -73,8 +73,8 @@ export function createIsConfiguredAsSsrExternal(
         true,
         // Allow linked packages to be externalized if they are explicitly
         // configured as external
-        !!configuredAsExternal,
-      )?.external
+        Boolean(configuredAsExternal),
+      )?.external)
     } catch (e) {
       debug?.(
         `Failed to node resolve "${id}". Skipping externalizing it by default.`,
diff --git a/packages/vite/src/node/utils.ts b/packages/vite/src/node/utils.ts
index 393bc391799aad12b47cfd2f2495e95529ec4348..248e1c2852428990b7f24b8fa605977325299ed7 100644
--- a/packages/vite/src/node/utils.ts
+++ b/packages/vite/src/node/utils.ts
@@ -168,7 +168,7 @@ export function createDebugger(
   let enabled = log.enabled
   if (enabled && onlyWhenFocused) {
     const ns = typeof onlyWhenFocused === 'string' ? onlyWhenFocused : namespace
-    enabled = !!DEBUG?.includes(ns)
+    enabled = Boolean(DEBUG?.includes(ns))
   }
 
   if (enabled) {
@@ -745,7 +745,7 @@ function splitSrcSetDescriptor(srcs: string): ImageCandidate[] {
         descriptor: src.slice(url.length).trim(),
       }
     })
-    .filter(({ url }) => !!url)
+    .filter(({ url }) => Boolean(url))
 }
 
 export function processSrcSet(
diff --git a/playground/vitestSetup.ts b/playground/vitestSetup.ts
index eb28b5f544d453bc234ee6f3da780f2d4fa44cd4..9c25b1cac3de9e99909374f4f1fa6fd11fa898d1 100644
--- a/playground/vitestSetup.ts
+++ b/playground/vitestSetup.ts
@@ -27,7 +27,7 @@ import { beforeAll, inject } from 'vitest'
 
 export const workspaceRoot = path.resolve(__dirname, '../')
 
-export const isBuild = !!process.env.VITE_TEST_BUILD
+export const isBuild = Boolean(process.env.VITE_TEST_BUILD)
 export const isServe = !isBuild
 export const isWindows = process.platform === 'win32'
 export const viteBinPath = path.posix.join(
@@ -267,7 +267,7 @@ export async function startDefaultServe(): Promise<void> {
       },
     )
     const rollupOutput = await build(buildConfig)
-    const isWatch = !!resolvedConfig!.build.watch
+    const isWatch = Boolean(resolvedConfig)!.build.watch
     // in build watch,call startStaticServer after the build is complete
     if (isWatch) {
       watcher = rollupOutput as RollupWatcher
