# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
parameters:
  python_version:
    type: string
    default: "3.13"
executors:
  default_image:
    docker:
      - image: ghcr.io/astral-sh/uv:python<<pipeline.parameters.python_version>>-bookworm
    working_directory: /codegen-sdk
    environment:
      UV_COMPILE_BYTECODE: 1
      UV_LINK_MODE: copy
  default_vm:
    machine:
      image: ubuntu-2404:current
orbs:
  aws-cli: circleci/aws-cli@5.1.3
  codecov: codecov/codecov@5.2.0
  node: circleci/node@7.0.0
  github-cli: circleci/github-cli@2.6.2
  slack: circleci/slack@5.1.1






commands:
  install-lfs:
    steps:
      - run:
          command: |
            apt update && apt install -y git-lfs
            git lfs install
  setup-lfs:
    steps:
      - run:
          command: |
            ./scripts/setup-lfs.sh
  install-uv:
    steps:
      - run:
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            source $HOME/.local/bin/env
  clone-repos:
    parameters:
      extra_repos:
        type: boolean
        default: true
    steps:
      - restore_cache:
          keys:
            - repos-<<parameters.extra_repos>>
      - run:
          command: |
            EXTRA_REPOS_ARG=""
            if [ "<<parameters.extra_repos>>" = "true" ]; then
              EXTRA_REPOS_ARG="--extra-repos"
            fi
            uv run --frozen python -m tests.shared.codemod.commands clone-repos ${EXTRA_REPOS_ARG} --token ${CODEGEN_BOT_GHE_TOKEN} --clean-cache
      - save_cache:
          paths:
            - $GITHUB_WORKSPACE
          key: repos-<<parameters.extra_repos>>
  build-wheels:
    steps:
    - install-uv
    - restore_cache:
        keys:
          - cibuildwheel-cache-<<pipeline.parameters.python_version>>-{{ .Environment.CIRCLE_JOB }}-{{ checksum "uv.lock" }}--{{ checksum "pyproject.toml" }}-{{ arch }}
    - run:
        command: |
          uv run --frozen cibuildwheel --output-dir dist
          rm dist/.gitignore || true
        environment:
          HATCH_BUILD_HOOKS_ENABLE: "true"
    - save_cache:
        paths:
          - /home/circleci/.cache/cibuildwheel
        key: cibuildwheel-cache-<<pipeline.parameters.python_version>>-{{ .Environment.CIRCLE_JOB }}-{{ checksum "uv.lock" }}--{{ checksum "pyproject.toml" }}-{{ arch }}
  setup-uv:
    steps:
    - install-lfs
    - checkout
    - restore_cache:
        keys:
          - uv-cache-1-<<pipeline.parameters.python_version>>-{{ .Environment.CIRCLE_WORKING_DIRECTORY }}-{{ arch }}-{{ checksum "uv.lock" }}
    - run:
        shell: bash
        command: |
          uv tool install codecov-cli --python 3.10 --with coverage
          pip install coverage
          uv sync --frozen --all-extras --python <<pipeline.parameters.python_version>>
    - save_cache:
        paths:
          - ~/.cache/uv
        key: uv-cache-1-<<pipeline.parameters.python_version>>-{{ .Environment.CIRCLE_WORKING_DIRECTORY }}-{{ arch }}-{{ checksum "uv.lock" }}
    - setup-lfs
  upload-tests:
      steps:
        - store_test_results:
            path: build/test-results/test/TEST.xml
        - codecov/upload:
            binary: ../root/.local/bin/codecovcli
            files: build/test-results/test/TEST.xml
            report_type: test_results
  run_ats:
      parameters:
        default_tests:
          type: string
          default: "tests/unit"
        codecov_flags:
          type: string
          default: "smart-tests"
        ats_collect_args:
          type: string
          default: ""
        collect_args:
          type: string
          default: ""
        split_tests:
          type: boolean
          default: true
      steps:
        - run:
            command: |
              export BASE_SHA=<<pipeline.git.base_revision>>
              export DEFAULT_TESTS="<<parameters.default_tests>>"
              export CODECOV_STATIC_TOKEN="${CODECOV_STATIC_TOKEN}"
              export CODECOV_TOKEN="${CODECOV_TOKEN}"
              export COLLECT_ARGS="<<parameters.collect_args>>"
              export ATS_COLLECT_ARGS="<<parameters.ats_collect_args>>"
              uv run --frozen bash ./.circleci/ats.sh
        - store_artifacts:
            path: codecov_ats
            destination: ${CIRCLE_NODE_INDEX}-${CIRCLE_JOB}-
        - when:
            condition: <<parameters.split_tests>>
            steps:
              - run:
                  name: Run tests
                  command: |
                    TESTS_TO_RUN=$(cat codecov_ats/tests_to_run.txt)
                    echo $TESTS_TO_RUN
                    echo $TESTS_TO_RUN | circleci tests run --command "xargs uv run --frozen pytest --cov \
                    -o junit_suite_name="${CIRCLE_JOB}-${CIRCLE_NODE_INDEX}" \
                    -n auto \
                    -vv \
                    --cov \
                    --cov-append \
                    <<parameters.collect_args>>
                    " --split-by=timings --timings-type=name
        - unless:
              condition: <<parameters.split_tests>>
              steps:
              - run:
                  name: Run tests
                  command: |
                    cat codecov_ats/tests_to_run.txt | xargs uv run --frozen pytest \
                    --cov \
                    -vv \
                    -o junit_suite_name="${CIRCLE_JOB}-${CIRCLE_NODE_INDEX}" \
                    -n auto \
                    --cov-append \
                    <<parameters.collect_args>>
        - upload-tests
        - codecov/upload:
            flags: <<parameters.codecov_flags>>
            plugins: pycoverage,compress-pycoverage
            files: coverage.codecov.json
 # Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  oss-codemod-tests:
    parameters:
      sync_graph:
        type: boolean
        default: true
      size:
        type: string
        default: "small"
    parallelism: 2
    executor: default_vm
    resource_class: xlarge
    steps:
    - install-uv
    - setup-uv
    - clone-repos:
        extra_repos: false
    - run_ats:
        default_tests: "tests/integration/codemod/test_codemods.py"
        codecov_flags: "smart-tests-codemod-oss"
        collect_args: --size=<<parameters.size>> --sync-graph=<<parameters.sync_graph>> --token ${CODEGEN_BOT_GHE_TOKEN}
        ats_collect_args: --size=<<parameters.size>>,--sync-graph=<<parameters.sync_graph>>,--token=${CODEGEN_BOT_GHE_TOKEN},
        split_tests: false
    - slack/notify:
        event: fail
        branch_pattern: "develop"
        channel: "alerts-codemod-tests"
        template: basic_fail_1
  parse-tests:
    parameters:
      extra_repos:
        type: boolean
        default: true
    executor: default_vm
    resource_class: "2xlarge"
    parallelism: 2
    steps:
    - install-uv
    - setup-uv
    - node/install:
        install-pnpm: true
        install-yarn: true
        use-nvm-cache: true
    - clone-repos:
        extra_repos: <<parameters.extra_repos>>
    - run:
        command: |
          EXTRA_REPOS_ARG=""
          if [ "<<parameters.extra_repos>>" = "true" ]; then
            EXTRA_REPOS_ARG="--extra-repos=true"
          fi
          PYTEST_ARGS="${EXTRA_REPOS_ARG} --token ${CODEGEN_BOT_GHE_TOKEN} -o junit_suite_name=\"${CIRCLE_JOB}\" tests/integration/codemod/test_parse.py"
          echo "Running tests with args: $PYTEST_ARGS"
          TESTS_TO_RUN=$(PYTEST_ARGS=${PYTEST_ARGS} ./.circleci/collect.sh)
          echo $TESTS_TO_RUN | circleci tests run --command "ulimit -s unlimited; xargs uv run --frozen pytest -n auto ${PYTEST_ARGS}"

    - store_test_results:
        path: build/test-results/test/TEST.xml
    - when:
        condition: <<parameters.extra_repos>>
        steps:
          - slack/notify:
              event: fail
              branch_pattern: "develop"
              channel: "alerts-parse-tests"
              template: basic_fail_1

  linux-wheels:
    parameters:
      resource_class:
        type: string
        default: "large"
    working_directory: ~/linux-wheels
    machine:
      image: ubuntu-2404:2024.05.1
      docker_layer_caching: true
    resource_class: <<parameters.resource_class>>
    steps:
      - checkout
      - build-wheels
      - persist_to_workspace:
          root: .
          paths:
            - dist/
  osx-wheels:
    working_directory: ~/osx-wheels
    macos:
      xcode: 15.4.0
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - build-wheels
      - persist_to_workspace:
          root: .
          paths:
            - dist/
  release-pypi:
    executor: default_image
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        name: Release
        command: |
          export UV_PUBLISH_PASSWORD="${PYPI_TOKEN}"
          export UV_PUBLISH_USERNAME="__token__"
          uv publish --publish-url https://upload.pypi.org/legacy/ --keyring-provider disabled
    - slack/notify:
        event: fail
        branch_pattern: "develop"
        channel: "release"
        template: basic_fail_1
    - slack/notify:
        event: pass
        channel: "release"
        template: success_tagged_deploy_1
workflows:
  publish-packages:
    jobs:
      - linux-wheels:
          filters:
            tags:
              only: /^v.*/
          matrix:
            parameters:
              resource_class: [large, arm.large]

      - osx-wheels:
          filters:
            tags:
              only: /^v.*/
      - release-pypi:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          context:
            - pypi
            - slack
          requires:
            - linux-wheels
            - osx-wheels
